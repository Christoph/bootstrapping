(function() {
  var PlatformIOTerminal;

  PlatformIOTerminal = require('../lib/platformio-ide-terminal');

  describe("PlatformIOTerminal", function() {
    var activationPromise, ref, workspaceElement;
    ref = [], workspaceElement = ref[0], activationPromise = ref[1];
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      return activationPromise = atom.packages.activatePackage('platformio-ide-terminal');
    });
    return describe("when the platformio-ide-terminal:toggle event is triggered", function() {
      it("hides and shows the modal panel", function() {
        expect(workspaceElement.querySelector('.platformio-ide-terminal')).not.toExist();
        atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var platformIOTerminalElement, statusBar;
          expect(workspaceElement.querySelector('.platformio-ide-terminal')).toExist();
          platformIOTerminalElement = workspaceElement.querySelector('.platformio-ide-terminal');
          expect(platformIOTerminalElement).toExist();
          statusBar = atom.workspace.panelForItem(platformIOTerminalElement);
          expect(statusBar.isVisible()).toBe(true);
          atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
          return expect(statusBar.isVisible()).toBe(false);
        });
      });
      return it("hides and shows the view", function() {
        jasmine.attachToDOM(workspaceElement);
        expect(workspaceElement.querySelector('.platformio-ide-terminal')).not.toExist();
        atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var platformIOTerminalElement;
          platformIOTerminalElement = workspaceElement.querySelector('.platformio-ide-terminal');
          expect(platformIOTerminalElement).toBeVisible();
          atom.commands.dispatch(workspaceElement, 'platformio-ide-terminal:toggle');
          return expect(platformIOTerminalElement).not.toBeVisible();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvY2hyaXMvLmF0b20vcGFja2FnZXMvcGxhdGZvcm1pby1pZGUtdGVybWluYWwvc3BlYy9wbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbC1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsa0JBQUEsR0FBcUIsT0FBQSxDQUFRLGdDQUFSOztFQU9yQixRQUFBLENBQVMsb0JBQVQsRUFBK0IsU0FBQTtBQUM3QixRQUFBO0lBQUEsTUFBd0MsRUFBeEMsRUFBQyx5QkFBRCxFQUFtQjtJQUVuQixVQUFBLENBQVcsU0FBQTtNQUNULGdCQUFBLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBWCxDQUFtQixJQUFJLENBQUMsU0FBeEI7YUFDbkIsaUJBQUEsR0FBb0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFkLENBQThCLHlCQUE5QjtJQUZYLENBQVg7V0FJQSxRQUFBLENBQVMsNERBQVQsRUFBdUUsU0FBQTtNQUNyRSxFQUFBLENBQUcsaUNBQUgsRUFBc0MsU0FBQTtRQUdwQyxNQUFBLENBQU8sZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsMEJBQS9CLENBQVAsQ0FBa0UsQ0FBQyxHQUFHLENBQUMsT0FBdkUsQ0FBQTtRQUlBLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBZCxDQUF1QixnQkFBdkIsRUFBeUMsZ0NBQXpDO1FBRUEsZUFBQSxDQUFnQixTQUFBO2lCQUNkO1FBRGMsQ0FBaEI7ZUFHQSxJQUFBLENBQUssU0FBQTtBQUNILGNBQUE7VUFBQSxNQUFBLENBQU8sZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsMEJBQS9CLENBQVAsQ0FBa0UsQ0FBQyxPQUFuRSxDQUFBO1VBRUEseUJBQUEsR0FBNEIsZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsMEJBQS9CO1VBQzVCLE1BQUEsQ0FBTyx5QkFBUCxDQUFpQyxDQUFDLE9BQWxDLENBQUE7VUFFQSxTQUFBLEdBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFmLENBQTRCLHlCQUE1QjtVQUNaLE1BQUEsQ0FBTyxTQUFTLENBQUMsU0FBVixDQUFBLENBQVAsQ0FBNkIsQ0FBQyxJQUE5QixDQUFtQyxJQUFuQztVQUNBLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBZCxDQUF1QixnQkFBdkIsRUFBeUMsZ0NBQXpDO2lCQUNBLE1BQUEsQ0FBTyxTQUFTLENBQUMsU0FBVixDQUFBLENBQVAsQ0FBNkIsQ0FBQyxJQUE5QixDQUFtQyxLQUFuQztRQVRHLENBQUw7TUFab0MsQ0FBdEM7YUF1QkEsRUFBQSxDQUFHLDBCQUFILEVBQStCLFNBQUE7UUFPN0IsT0FBTyxDQUFDLFdBQVIsQ0FBb0IsZ0JBQXBCO1FBRUEsTUFBQSxDQUFPLGdCQUFnQixDQUFDLGFBQWpCLENBQStCLDBCQUEvQixDQUFQLENBQWtFLENBQUMsR0FBRyxDQUFDLE9BQXZFLENBQUE7UUFJQSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQWQsQ0FBdUIsZ0JBQXZCLEVBQXlDLGdDQUF6QztRQUVBLGVBQUEsQ0FBZ0IsU0FBQTtpQkFDZDtRQURjLENBQWhCO2VBR0EsSUFBQSxDQUFLLFNBQUE7QUFFSCxjQUFBO1VBQUEseUJBQUEsR0FBNEIsZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsMEJBQS9CO1VBQzVCLE1BQUEsQ0FBTyx5QkFBUCxDQUFpQyxDQUFDLFdBQWxDLENBQUE7VUFDQSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQWQsQ0FBdUIsZ0JBQXZCLEVBQXlDLGdDQUF6QztpQkFDQSxNQUFBLENBQU8seUJBQVAsQ0FBaUMsQ0FBQyxHQUFHLENBQUMsV0FBdEMsQ0FBQTtRQUxHLENBQUw7TUFsQjZCLENBQS9CO0lBeEJxRSxDQUF2RTtFQVA2QixDQUEvQjtBQVBBIiwic291cmNlc0NvbnRlbnQiOlsiUGxhdGZvcm1JT1Rlcm1pbmFsID0gcmVxdWlyZSAnLi4vbGliL3BsYXRmb3JtaW8taWRlLXRlcm1pbmFsJ1xuXG4jIFVzZSB0aGUgY29tbWFuZCBgd2luZG93OnJ1bi1wYWNrYWdlLXNwZWNzYCAoY21kLWFsdC1jdHJsLXApIHRvIHJ1biBzcGVjcy5cbiNcbiMgVG8gcnVuIGEgc3BlY2lmaWMgYGl0YCBvciBgZGVzY3JpYmVgIGJsb2NrIGFkZCBhbiBgZmAgdG8gdGhlIGZyb250IChlLmcuIGBmaXRgXG4jIG9yIGBmZGVzY3JpYmVgKS4gUmVtb3ZlIHRoZSBgZmAgdG8gdW5mb2N1cyB0aGUgYmxvY2suXG5cbmRlc2NyaWJlIFwiUGxhdGZvcm1JT1Rlcm1pbmFsXCIsIC0+XG4gIFt3b3Jrc3BhY2VFbGVtZW50LCBhY3RpdmF0aW9uUHJvbWlzZV0gPSBbXVxuXG4gIGJlZm9yZUVhY2ggLT5cbiAgICB3b3Jrc3BhY2VFbGVtZW50ID0gYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKVxuICAgIGFjdGl2YXRpb25Qcm9taXNlID0gYXRvbS5wYWNrYWdlcy5hY3RpdmF0ZVBhY2thZ2UoJ3BsYXRmb3JtaW8taWRlLXRlcm1pbmFsJylcblxuICBkZXNjcmliZSBcIndoZW4gdGhlIHBsYXRmb3JtaW8taWRlLXRlcm1pbmFsOnRvZ2dsZSBldmVudCBpcyB0cmlnZ2VyZWRcIiwgLT5cbiAgICBpdCBcImhpZGVzIGFuZCBzaG93cyB0aGUgbW9kYWwgcGFuZWxcIiwgLT5cbiAgICAgICMgQmVmb3JlIHRoZSBhY3RpdmF0aW9uIGV2ZW50IHRoZSB2aWV3IGlzIG5vdCBvbiB0aGUgRE9NLCBhbmQgbm8gcGFuZWxcbiAgICAgICMgaGFzIGJlZW4gY3JlYXRlZFxuICAgICAgZXhwZWN0KHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXRmb3JtaW8taWRlLXRlcm1pbmFsJykpLm5vdC50b0V4aXN0KClcblxuICAgICAgIyBUaGlzIGlzIGFuIGFjdGl2YXRpb24gZXZlbnQsIHRyaWdnZXJpbmcgaXQgd2lsbCBjYXVzZSB0aGUgcGFja2FnZSB0byBiZVxuICAgICAgIyBhY3RpdmF0ZWQuXG4gICAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoIHdvcmtzcGFjZUVsZW1lbnQsICdwbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbDp0b2dnbGUnXG5cbiAgICAgIHdhaXRzRm9yUHJvbWlzZSAtPlxuICAgICAgICBhY3RpdmF0aW9uUHJvbWlzZVxuXG4gICAgICBydW5zIC0+XG4gICAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbCcpKS50b0V4aXN0KClcblxuICAgICAgICBwbGF0Zm9ybUlPVGVybWluYWxFbGVtZW50ID0gd29ya3NwYWNlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGxhdGZvcm1pby1pZGUtdGVybWluYWwnKVxuICAgICAgICBleHBlY3QocGxhdGZvcm1JT1Rlcm1pbmFsRWxlbWVudCkudG9FeGlzdCgpXG5cbiAgICAgICAgc3RhdHVzQmFyID0gYXRvbS53b3Jrc3BhY2UucGFuZWxGb3JJdGVtKHBsYXRmb3JtSU9UZXJtaW5hbEVsZW1lbnQpXG4gICAgICAgIGV4cGVjdChzdGF0dXNCYXIuaXNWaXNpYmxlKCkpLnRvQmUgdHJ1ZVxuICAgICAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoIHdvcmtzcGFjZUVsZW1lbnQsICdwbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbDp0b2dnbGUnXG4gICAgICAgIGV4cGVjdChzdGF0dXNCYXIuaXNWaXNpYmxlKCkpLnRvQmUgZmFsc2VcblxuICAgIGl0IFwiaGlkZXMgYW5kIHNob3dzIHRoZSB2aWV3XCIsIC0+XG4gICAgICAjIFRoaXMgdGVzdCBzaG93cyB5b3UgYW4gaW50ZWdyYXRpb24gdGVzdCB0ZXN0aW5nIGF0IHRoZSB2aWV3IGxldmVsLlxuXG4gICAgICAjIEF0dGFjaGluZyB0aGUgd29ya3NwYWNlRWxlbWVudCB0byB0aGUgRE9NIGlzIHJlcXVpcmVkIHRvIGFsbG93IHRoZVxuICAgICAgIyBgdG9CZVZpc2libGUoKWAgbWF0Y2hlcnMgdG8gd29yay4gQW55dGhpbmcgdGVzdGluZyB2aXNpYmlsaXR5IG9yIGZvY3VzXG4gICAgICAjIHJlcXVpcmVzIHRoYXQgdGhlIHdvcmtzcGFjZUVsZW1lbnQgaXMgb24gdGhlIERPTS4gVGVzdHMgdGhhdCBhdHRhY2ggdGhlXG4gICAgICAjIHdvcmtzcGFjZUVsZW1lbnQgdG8gdGhlIERPTSBhcmUgZ2VuZXJhbGx5IHNsb3dlciB0aGFuIHRob3NlIG9mZiBET00uXG4gICAgICBqYXNtaW5lLmF0dGFjaFRvRE9NKHdvcmtzcGFjZUVsZW1lbnQpXG5cbiAgICAgIGV4cGVjdCh3b3Jrc3BhY2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbCcpKS5ub3QudG9FeGlzdCgpXG5cbiAgICAgICMgVGhpcyBpcyBhbiBhY3RpdmF0aW9uIGV2ZW50LCB0cmlnZ2VyaW5nIGl0IGNhdXNlcyB0aGUgcGFja2FnZSB0byBiZVxuICAgICAgIyBhY3RpdmF0ZWQuXG4gICAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoIHdvcmtzcGFjZUVsZW1lbnQsICdwbGF0Zm9ybWlvLWlkZS10ZXJtaW5hbDp0b2dnbGUnXG5cbiAgICAgIHdhaXRzRm9yUHJvbWlzZSAtPlxuICAgICAgICBhY3RpdmF0aW9uUHJvbWlzZVxuXG4gICAgICBydW5zIC0+XG4gICAgICAgICMgTm93IHdlIGNhbiB0ZXN0IGZvciB2aWV3IHZpc2liaWxpdHlcbiAgICAgICAgcGxhdGZvcm1JT1Rlcm1pbmFsRWxlbWVudCA9IHdvcmtzcGFjZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBsYXRmb3JtaW8taWRlLXRlcm1pbmFsJylcbiAgICAgICAgZXhwZWN0KHBsYXRmb3JtSU9UZXJtaW5hbEVsZW1lbnQpLnRvQmVWaXNpYmxlKClcbiAgICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaCB3b3Jrc3BhY2VFbGVtZW50LCAncGxhdGZvcm1pby1pZGUtdGVybWluYWw6dG9nZ2xlJ1xuICAgICAgICBleHBlY3QocGxhdGZvcm1JT1Rlcm1pbmFsRWxlbWVudCkubm90LnRvQmVWaXNpYmxlKClcbiJdfQ==
