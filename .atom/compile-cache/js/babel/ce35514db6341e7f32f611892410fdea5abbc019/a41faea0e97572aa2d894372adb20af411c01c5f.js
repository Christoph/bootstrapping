function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/** @babel */

var _specHelpers = require('./spec-helpers');

var _specHelpers2 = _interopRequireDefault(_specHelpers);

describe('OpenerRegistry', function () {
  var filePath = 'wibble.pdf';
  // The various viewers
  var cannotOpen = undefined,
      canOpen = undefined,
      canOpenInBackground = undefined,
      canOpenWithSynctex = undefined;

  beforeEach(function () {
    waitsForPromise(function () {
      return _specHelpers2['default'].activatePackages();
    });
  });

  function createOpener(name, canOpen, hasSynctex, canOpenInBackground) {
    var instance = jasmine.createSpyObj(name, ['canOpen', 'open', 'hasSynctex', 'canOpenInBackground']);
    instance.canOpen.andReturn(canOpen);
    instance.open.andCallFake(function () {
      return Promise.resolve(undefined);
    });
    instance.hasSynctex.andReturn(hasSynctex);
    instance.canOpenInBackground.andReturn(canOpenInBackground);
    latex.opener.openers.set(name, instance);
    return instance;
  }

  beforeEach(function () {
    latex.opener.openers.clear();
    // The opener names have to conform to latex.opener schema
    cannotOpen = createOpener('skim', false, true, true);
    canOpen = createOpener('xdg-open', true, false, false);
    canOpenInBackground = createOpener('okular', true, false, true);
    canOpenWithSynctex = createOpener('evince', true, true, false);
  });

  describe('open', function () {
    it('opens using preferred viewer even if it does not have requested features', function () {
      atom.config.set('latex.enableSynctex', true);
      atom.config.set('latex.openResultInBackground', true);
      atom.config.set('latex.opener', 'xdg-open');

      waitsForPromise(function () {
        return latex.opener.open(filePath);
      });

      runs(function () {
        expect(cannotOpen.open).not.toHaveBeenCalled();
        expect(canOpen.open).toHaveBeenCalled();
        expect(canOpenInBackground.open).not.toHaveBeenCalled();
        expect(canOpenWithSynctex.open).not.toHaveBeenCalled();
      });
    });

    it('opens viewer that supports SyncTeX when enabled', function () {
      atom.config.set('latex.enableSynctex', true);
      atom.config.set('latex.openResultInBackground', true);
      atom.config.set('latex.opener', 'automatic');

      waitsForPromise(function () {
        return latex.opener.open(filePath);
      });

      runs(function () {
        expect(cannotOpen.open).not.toHaveBeenCalled();
        expect(canOpen.open).not.toHaveBeenCalled();
        expect(canOpenInBackground.open).not.toHaveBeenCalled();
        expect(canOpenWithSynctex.open).toHaveBeenCalled();
      });
    });

    it('opens viewer that supports background opening when enabled', function () {
      atom.config.set('latex.enableSynctex', false);
      atom.config.set('latex.openResultInBackground', true);
      atom.config.set('latex.opener', 'automatic');

      waitsForPromise(function () {
        return latex.opener.open(filePath);
      });

      runs(function () {
        expect(cannotOpen.open).not.toHaveBeenCalled();
        expect(canOpen.open).not.toHaveBeenCalled();
        expect(canOpenInBackground.open).toHaveBeenCalled();
        expect(canOpenWithSynctex.open).not.toHaveBeenCalled();
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,